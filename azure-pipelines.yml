# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

# NPM modules should be cached otherwise the install will be too slow
# https://docs.microsoft.com/en-us/azure/devops/pipelines/caching/?view=azure-devops
# since the username / user home directory are not available via system variables
# (there is even an open question about it)
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops
# just use "/home/vsts" for now
- task: CacheBeta@1
  inputs:
    key: npm | $(Agent.OS) | package-lock.json
    path: /home/vsts/.npm
    restoreKeys: npm | $(Agent.OS) | package-lock.json
  displayName: Cache NPM packages

# [Use this step] vrest-ng-cli binary should be cached
- task: CacheBeta@1
  inputs:
    key: vrest | $(Agent.OS) | 1_0_2
    path: /home/vsts/.cache/vrest
    restoreKeys: vrest | $(Agent.OS) | 1_0_2
  displayName: Cache vrest-ng-cli binary

# [Use this step] Download and Install vrest-ng-cli from Github Release
# Change version if you would like to install different version
# Change OS if you would like to install on different operation system
- bash: |
    if [ -f /home/vsts/.cache/vrest/vrest-ng-cli ]; then
      echo "##vso[task.setVariable variable=VREST_CLI_EXISTS]true"
    else 
      echo "##vso[task.setVariable variable=VREST_CLI_EXISTS]false"
    fi

- script: |
    wget -O /home/vsts/.cache/vrest/vrest-ng-cli -q https://github.com/Optimizory/vrest-ng-cli/releases/download/v1.0.2/vrest_ng_cli_linux_1_0_2
    chmod +x /home/vsts/.cache/vrest/vrest-ng-cli
  condition: eq(variables.VREST_CLI_EXISTS, 'false')
  displayName: 'Download and Install vrest-ng-cli binary'

- script: npm ci
  displayName: 'Install NPM dependencies'

- script: npm run start &
  displayName: 'Start the application server'

# [Use this step] To run vREST NG written Tests
- script: /home/vsts/.cache/vrest/vrest-ng-cli run --projectdir=test/scenario-tests --logger=xunit
  displayName: 'Run vREST NG Tests'

# [Use this step] To publish test results to azure pipelines
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testResultsFiles: 'vrest_logs/logs.xml' 
    searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
